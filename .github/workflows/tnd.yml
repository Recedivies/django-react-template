name: Test and Deployment

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test-backend:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        python-version: [3.8]

    timeout-minutes: 5
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        working-directory: backend

    services:
      postgres:
        image: postgres:12.0
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: github_actions
        ports:
          - 5432:5432
        # needed because the postgres container does not provide a healthcheck
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - name: Check out repository code
        uses: actions/checkout@v2

      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: psycopg2 prerequisites
        run: sudo apt-get install libpq-dev

      - name: Install dependencies
        run: |
          pip install -r requirements.txt

      - name: Tests coverage
        run: |
          coverage run manage.py test

  test-frontend:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        node: [14]

    timeout-minutes: 5
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        working-directory: frontend

    steps:
      - name: Check out repository code
        uses: actions/checkout@v2

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install dependencies
        run: |
          npm install

      - name: Run tests
        run: |
          CI=true npm test -- --coverage

  Deployment:
    if: ${{ github.event_name == 'push' && (contains(join(github.event.commits[0].message, ''), '#deploy')) }}
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    env:
      HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
      HEROKU_APP_NAME: ${{ secrets.HEROKU_APP_NAME }}
      HEROKU_EMAIL: ${{ secrets.HEROKU_EMAIL }}
    steps:
      - name: Check out repository
        uses: actions/checkout@v2

      - name: Deploy to Heroku
        uses: akhileshns/heroku-deploy@v3.12.12
        with:
          heroku_api_key: $HEROKU_API_KEY
          heroku_app_name: $HEROKU_APP_NAME
          heroku_email: $HEROKU_EMAIL
          healthcheck: "https://${{ env.HEROKU_APP_NAME }}.herokuapp.com/api/health"
          checkstring: '"ok"'
          rollbackonhealthcheckfailed: true

  Discord-Notification:
    if: ${{ github.event_name == 'push' && (contains(join(github.event.commits[0].message, ''), '#deploy')) }}
    needs: [Deployment]
    runs-on: ubuntu-latest
    env:
      HEROKU_APP_NAME: ${{ secrets.HEROKU_APP_NAME }}
      ACTOR: ${{ github.actor }}
      AVATAR_URL: ${{ github.event.sender.avatar_url }}
      COMMIT: ${{ github.event.commits[0].url }}

    steps:
      - name: Check out repository
        uses: actions/checkout@v2

      - name: Test Success
        uses: rjstone/discord-webhook-notify@v1
        if: success()
        with:
          username: GitHub
          avatarUrl: ${{ env.AVATAR_URL }}
          text: A new version of ${{ github.repository }} deployed
          severity: info
          description: "to https://${{ env.HEROKU_APP_NAME }}.herokuapp.com/ by ${{ env.ACTOR }}"
          footer: "Severity: Informational"
          webhookUrl: ${{ secrets.DISCORD_WEBHOOK }}

      - name: Test Failure
        uses: rjstone/discord-webhook-notify@v1
        if: failure()
        with:
          username: GitHub
          avatarUrl: ${{ env.AVATAR_URL }}
          text: Build failed
          severity: error
          description: "commit ${{ env.COMMIT }} by ${{ env.ACTOR }} broke the build :("
          footer: "Severity: Error"
          webhookUrl: ${{ secrets.DISCORD_WEBHOOK }}
